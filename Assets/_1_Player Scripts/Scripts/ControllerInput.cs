//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_1_Player Scripts/Scripts/ControllerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInput"",
    ""maps"": [
        {
            ""name"": ""GameActions"",
            ""id"": ""a3659a87-8dc0-473c-a1d6-6d34cb3f3bee"",
            ""actions"": [
                {
                    ""name"": ""MoveJumpVectorNegative"",
                    ""type"": ""Value"",
                    ""id"": ""8911b922-f9a7-4a61-9ff1-caa71ca6c405"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""55d34407-3f1f-4b0a-b5f2-4f0cfef5dd58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerRight"",
                    ""type"": ""Value"",
                    ""id"": ""7c15276e-67b4-48b7-9788-143521b32def"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorPositive"",
                    ""type"": ""Value"",
                    ""id"": ""3d3b2a0b-cada-44e0-b651-16294c520fec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Input"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d4dc813f-bb80-4f74-9823-0510360b9e28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""52e20a42-39dc-4ede-9e88-71ae82fe5574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2982d4db-f695-4861-ab8b-599ce140f39b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""6dd684c1-9e4b-4374-adaf-8545436b1b01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4f7c093-7e34-4294-b3d5-aa4eb012c4d4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a47c36-ae37-4e18-8925-bf6eb017b4fe"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""076bf96b-286d-426f-8664-cc36a175ba6a"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5826f3fa-44ca-4cd0-a965-0375e282df68"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07a140bf-c83d-4125-93f8-39f7c670bde9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd4f91ca-ba04-44c2-b88a-64625866e8c7"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b3949d8-5746-4f6e-b86b-30993384dd6d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f3ac4f4-3331-4946-8c8a-958ce3d76f3d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0803d79d-4c87-40eb-a120-cba9f2be45db"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff554a40-a31b-4dc6-a6dd-c6de65dde30b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3050801-3481-4c03-96c7-50015cb3d590"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9c184d0-b902-480d-b745-c9ac9c86f82e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84d07df-f131-455b-97fc-0139c83c9c0f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b33e8708-fd45-4775-aad6-c26313779b37"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d5ccb64-cfe9-4716-a023-b27daa1762ad"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions1"",
            ""id"": ""e4cdc12d-588f-4675-88e3-5b8e4ffda98b"",
            ""actions"": [
                {
                    ""name"": ""Input"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e1410e0-3832-4e10-a6be-2af81068b29c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dd683697-bac3-4257-a73b-999aa49e25ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""66343626-d06b-4aaa-b60f-011df31c8f24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10c950e7-95c5-49f3-a83b-234f3d7ac36c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f6d5ef4-f7e4-46bb-9e06-5b5e03b22778"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50a7f548-a357-4d5b-aff8-d4b494bb1b9a"",
                    ""path"": ""<Mouse>/radius"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c590e0e-5049-49e8-8eec-e864600624ec"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions2"",
            ""id"": ""edafdcc0-465a-4a68-964c-26be54801151"",
            ""actions"": [
                {
                    ""name"": ""MoveJumpVector"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b8c3d51c-c36d-4b38-a06d-0db6cd6e58a6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerRight"",
                    ""type"": ""Value"",
                    ""id"": ""e45bafdb-dd24-4163-bad9-0d173e1de98a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""3c67a27f-23d6-480b-b8db-775596f33303"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""94861725-dc32-4b91-b73a-0d73a9efa200"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""b83792fe-e116-4ad4-9c41-13f9661dd4ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f7f2215-fd73-46ee-aa66-847fe6929879"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c375cc6-7caa-4bad-97c9-b78bd4a4f019"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feaacebd-398f-4fed-8f14-617292608d4b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5923afbc-9de3-4290-9789-d5856c65d9c9"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44c6489f-1e3f-41f9-87ca-81dfc0ae98e5"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions3"",
            ""id"": ""03e75188-db45-4ecc-a5b0-673b14553505"",
            ""actions"": [
                {
                    ""name"": ""MoveJumpVector"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6301b471-ae62-445c-9b02-8aca7bdf7892"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerRight"",
                    ""type"": ""Value"",
                    ""id"": ""2db339ac-3beb-4eac-996e-3d49e36770b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""0f23f28a-9242-4947-af20-d3ce014fe997"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""af214a37-204e-4124-8cae-636a4069e0f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""2cc5dd61-34f6-45b4-af92-8762481d6392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74055b7c-69bc-4b42-aa2e-2b2726d6a027"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce5026ea-7f89-4cf7-a50e-acbc2f02f9a9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""921ad03a-e09a-4d8c-b2bc-a1ca529cf48f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2e06485-b1b1-4ac4-a134-8a565724a19a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd44d6c9-84f8-41fd-a4ea-8ec541f3aa4d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions4"",
            ""id"": ""aa8b232c-dcb1-4d6f-942a-0ea43688c534"",
            ""actions"": [
                {
                    ""name"": ""MovePlayerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""86131d66-e9c2-4da5-af48-626305af4bc5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerRight"",
                    ""type"": ""Value"",
                    ""id"": ""66a1dde6-b9a7-4a38-a322-40004d180083"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorPositive"",
                    ""type"": ""Button"",
                    ""id"": ""330af6e9-9f3b-4419-8d20-e1824db7cb56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorNegative"",
                    ""type"": ""Button"",
                    ""id"": ""d8cd9c3c-62c7-4566-bc90-ce16b7a4813c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9db58e87-26e5-434b-9d31-640074484b03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""1d2964d8-e76a-4c8e-b5be-44198673fc21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""674765cb-9321-4b70-b386-1c03f196fd84"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3e95293-291e-4de1-9365-6790eded9e16"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3406204-d4e9-48ac-ad50-3c710fa1721b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ae594dd-fa3e-434e-9e67-1e32bf240c28"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""965331a8-b7be-428d-b0a4-cd9c84d74330"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba2a63fc-8e69-4052-9c3f-ba624471d3ce"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions5"",
            ""id"": ""d8dc6660-aea0-44ee-9cc8-0a675ee5d982"",
            ""actions"": [
                {
                    ""name"": ""MovePlayerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""aa5e35a0-deb9-4ad0-a908-272fe6f1ac15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayerRight"",
                    ""type"": ""Value"",
                    ""id"": ""ef14ec99-244e-4dfb-9468-3821a4813985"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorPositive"",
                    ""type"": ""Button"",
                    ""id"": ""0232bb35-bc35-4758-b9af-e7403e5f3ba1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorNegative"",
                    ""type"": ""Button"",
                    ""id"": ""a9ab6da2-7b6c-4a3a-91e9-0a8fcab4db50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""df27b514-6e15-43c9-9b74-77f83a478c64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""f5977183-6fa5-4e25-8e1b-0cf3a1e35158"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89191cff-b609-420d-84f1-27fe8a15dadc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abeec635-501d-4803-accc-244df61c80bb"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f02f8b78-8b1d-4da2-bc71-0475fbc9b960"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c4193c9-5460-449d-8efd-80f8e6a425cb"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1231d666-15bc-4a86-af8a-d577b1c81ed2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95029bc0-da9a-428e-90cc-6a5989c0d789"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameActions6"",
            ""id"": ""b673466d-9b3e-44f8-9266-5ab59eb8d2e8"",
            ""actions"": [
                {
                    ""name"": ""Input"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2e5f0e39-85e5-49fb-b52a-1122a4f671a6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b80d2734-045b-4ec9-b05b-40f2e48e0b6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveState"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8541abca-e46d-4909-9700-00bbeff8ea05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""8c0f51ad-7bac-48ac-b464-c493bc36aa5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21cecdf8-81e3-4246-a05a-c88810c9bd85"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d6bc2df-0c93-4bc8-9bf9-78cd123dbd81"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fcdf9b6-061d-4c17-b419-769ce0f1029e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""920891c4-35d4-439a-9e2d-6fdccc2e769b"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rework1"",
            ""id"": ""3ef248b0-4a7b-418c-b219-ef61924dbdbb"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Value"",
                    ""id"": ""58cac8b8-fd93-4fc6-a3db-0e815865128a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Value"",
                    ""id"": ""0462dddc-eb5b-4a5f-bd4e-05a6a002d04b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""566d623f-55f7-47f3-a8d9-6ac6d93ef614"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugIsgrounded"",
                    ""type"": ""Button"",
                    ""id"": ""2cea47b4-063c-4c3e-8c53-686d23dd32bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveJumpVectorNegative"",
                    ""type"": ""Button"",
                    ""id"": ""f99bc193-4432-4ee6-8116-af2cca089f06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorPositive"",
                    ""type"": ""Button"",
                    ""id"": ""b8a1de02-39b4-4118-aeb9-cf2e50aaffcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb07e20a-9620-4e57-bd46-5a378916556b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5c7f90b-b362-433b-adca-5e62fab7b9b5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c1776a0-cadd-4b38-a091-27589ce94e65"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8182cf73-738c-43b4-973d-ad508d6847a4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbdd3178-4707-4eb4-9d9e-6656cf548cf6"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96ce424a-4f8d-4c1f-b04a-82c7e5a0cb05"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89dc1eaa-6687-4efc-8ec9-9186991b9abb"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22c40910-31e9-4cd6-a84a-ead784550abc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9856bf4e-12fb-4fcf-ae64-2ad994ba2675"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11968efc-e463-4c14-85f5-f81fd8f886c2"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugIsgrounded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87d55ed3-85c9-48b3-80ef-70eca6064cb7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b441c1ac-2027-4495-8d92-b81e8128c0ec"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b34a192-ef75-4362-96b0-ee1c93969769"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5ebc55d-223b-4ce0-b654-6275b86192e0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b73ad36-a480-491b-adfa-257efdbe2aca"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameActions
        m_GameActions = asset.FindActionMap("GameActions", throwIfNotFound: true);
        m_GameActions_MoveJumpVectorNegative = m_GameActions.FindAction("MoveJumpVectorNegative", throwIfNotFound: true);
        m_GameActions_MovePlayerLeft = m_GameActions.FindAction("MovePlayerLeft", throwIfNotFound: true);
        m_GameActions_MovePlayerRight = m_GameActions.FindAction("MovePlayerRight", throwIfNotFound: true);
        m_GameActions_MoveJumpVectorPositive = m_GameActions.FindAction("MoveJumpVectorPositive", throwIfNotFound: true);
        m_GameActions_Input = m_GameActions.FindAction("Input", throwIfNotFound: true);
        m_GameActions_Jump = m_GameActions.FindAction("Jump", throwIfNotFound: true);
        m_GameActions_Newaction = m_GameActions.FindAction("New action", throwIfNotFound: true);
        m_GameActions_DebugIsgrounded = m_GameActions.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions1
        m_GameActions1 = asset.FindActionMap("GameActions1", throwIfNotFound: true);
        m_GameActions1_Input = m_GameActions1.FindAction("Input", throwIfNotFound: true);
        m_GameActions1_Jump = m_GameActions1.FindAction("Jump", throwIfNotFound: true);
        m_GameActions1_DebugIsgrounded = m_GameActions1.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions2
        m_GameActions2 = asset.FindActionMap("GameActions2", throwIfNotFound: true);
        m_GameActions2_MoveJumpVector = m_GameActions2.FindAction("MoveJumpVector", throwIfNotFound: true);
        m_GameActions2_MovePlayerRight = m_GameActions2.FindAction("MovePlayerRight", throwIfNotFound: true);
        m_GameActions2_MovePlayerLeft = m_GameActions2.FindAction("MovePlayerLeft", throwIfNotFound: true);
        m_GameActions2_Jump = m_GameActions2.FindAction("Jump", throwIfNotFound: true);
        m_GameActions2_DebugIsgrounded = m_GameActions2.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions3
        m_GameActions3 = asset.FindActionMap("GameActions3", throwIfNotFound: true);
        m_GameActions3_MoveJumpVector = m_GameActions3.FindAction("MoveJumpVector", throwIfNotFound: true);
        m_GameActions3_MovePlayerRight = m_GameActions3.FindAction("MovePlayerRight", throwIfNotFound: true);
        m_GameActions3_MovePlayerLeft = m_GameActions3.FindAction("MovePlayerLeft", throwIfNotFound: true);
        m_GameActions3_Jump = m_GameActions3.FindAction("Jump", throwIfNotFound: true);
        m_GameActions3_DebugIsgrounded = m_GameActions3.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions4
        m_GameActions4 = asset.FindActionMap("GameActions4", throwIfNotFound: true);
        m_GameActions4_MovePlayerLeft = m_GameActions4.FindAction("MovePlayerLeft", throwIfNotFound: true);
        m_GameActions4_MovePlayerRight = m_GameActions4.FindAction("MovePlayerRight", throwIfNotFound: true);
        m_GameActions4_MoveJumpVectorPositive = m_GameActions4.FindAction("MoveJumpVectorPositive", throwIfNotFound: true);
        m_GameActions4_MoveJumpVectorNegative = m_GameActions4.FindAction("MoveJumpVectorNegative", throwIfNotFound: true);
        m_GameActions4_Jump = m_GameActions4.FindAction("Jump", throwIfNotFound: true);
        m_GameActions4_DebugIsgrounded = m_GameActions4.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions5
        m_GameActions5 = asset.FindActionMap("GameActions5", throwIfNotFound: true);
        m_GameActions5_MovePlayerLeft = m_GameActions5.FindAction("MovePlayerLeft", throwIfNotFound: true);
        m_GameActions5_MovePlayerRight = m_GameActions5.FindAction("MovePlayerRight", throwIfNotFound: true);
        m_GameActions5_MoveJumpVectorPositive = m_GameActions5.FindAction("MoveJumpVectorPositive", throwIfNotFound: true);
        m_GameActions5_MoveJumpVectorNegative = m_GameActions5.FindAction("MoveJumpVectorNegative", throwIfNotFound: true);
        m_GameActions5_Jump = m_GameActions5.FindAction("Jump", throwIfNotFound: true);
        m_GameActions5_DebugIsgrounded = m_GameActions5.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // GameActions6
        m_GameActions6 = asset.FindActionMap("GameActions6", throwIfNotFound: true);
        m_GameActions6_Input = m_GameActions6.FindAction("Input", throwIfNotFound: true);
        m_GameActions6_Jump = m_GameActions6.FindAction("Jump", throwIfNotFound: true);
        m_GameActions6_MoveState = m_GameActions6.FindAction("MoveState", throwIfNotFound: true);
        m_GameActions6_DebugIsgrounded = m_GameActions6.FindAction("DebugIsgrounded", throwIfNotFound: true);
        // Rework1
        m_Rework1 = asset.FindActionMap("Rework1", throwIfNotFound: true);
        m_Rework1_Left = m_Rework1.FindAction("Left", throwIfNotFound: true);
        m_Rework1_Right = m_Rework1.FindAction("Right", throwIfNotFound: true);
        m_Rework1_Jump = m_Rework1.FindAction("Jump", throwIfNotFound: true);
        m_Rework1_DebugIsgrounded = m_Rework1.FindAction("DebugIsgrounded", throwIfNotFound: true);
        m_Rework1_MoveJumpVectorNegative = m_Rework1.FindAction("MoveJumpVectorNegative", throwIfNotFound: true);
        m_Rework1_MoveJumpVectorPositive = m_Rework1.FindAction("MoveJumpVectorPositive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameActions
    private readonly InputActionMap m_GameActions;
    private List<IGameActionsActions> m_GameActionsActionsCallbackInterfaces = new List<IGameActionsActions>();
    private readonly InputAction m_GameActions_MoveJumpVectorNegative;
    private readonly InputAction m_GameActions_MovePlayerLeft;
    private readonly InputAction m_GameActions_MovePlayerRight;
    private readonly InputAction m_GameActions_MoveJumpVectorPositive;
    private readonly InputAction m_GameActions_Input;
    private readonly InputAction m_GameActions_Jump;
    private readonly InputAction m_GameActions_Newaction;
    private readonly InputAction m_GameActions_DebugIsgrounded;
    public struct GameActionsActions
    {
        private @ControllerInput m_Wrapper;
        public GameActionsActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveJumpVectorNegative => m_Wrapper.m_GameActions_MoveJumpVectorNegative;
        public InputAction @MovePlayerLeft => m_Wrapper.m_GameActions_MovePlayerLeft;
        public InputAction @MovePlayerRight => m_Wrapper.m_GameActions_MovePlayerRight;
        public InputAction @MoveJumpVectorPositive => m_Wrapper.m_GameActions_MoveJumpVectorPositive;
        public InputAction @Input => m_Wrapper.m_GameActions_Input;
        public InputAction @Jump => m_Wrapper.m_GameActions_Jump;
        public InputAction @Newaction => m_Wrapper.m_GameActions_Newaction;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionsActions set) { return set.Get(); }
        public void AddCallbacks(IGameActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsActionsCallbackInterfaces.Add(instance);
            @MoveJumpVectorNegative.started += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled += instance.OnMoveJumpVectorNegative;
            @MovePlayerLeft.started += instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed += instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled += instance.OnMovePlayerLeft;
            @MovePlayerRight.started += instance.OnMovePlayerRight;
            @MovePlayerRight.performed += instance.OnMovePlayerRight;
            @MovePlayerRight.canceled += instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled += instance.OnMoveJumpVectorPositive;
            @Input.started += instance.OnInput;
            @Input.performed += instance.OnInput;
            @Input.canceled += instance.OnInput;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActionsActions instance)
        {
            @MoveJumpVectorNegative.started -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled -= instance.OnMoveJumpVectorNegative;
            @MovePlayerLeft.started -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled -= instance.OnMovePlayerLeft;
            @MovePlayerRight.started -= instance.OnMovePlayerRight;
            @MovePlayerRight.performed -= instance.OnMovePlayerRight;
            @MovePlayerRight.canceled -= instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled -= instance.OnMoveJumpVectorPositive;
            @Input.started -= instance.OnInput;
            @Input.performed -= instance.OnInput;
            @Input.canceled -= instance.OnInput;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActionsActions instance)
        {
            if (m_Wrapper.m_GameActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActionsActions @GameActions => new GameActionsActions(this);

    // GameActions1
    private readonly InputActionMap m_GameActions1;
    private List<IGameActions1Actions> m_GameActions1ActionsCallbackInterfaces = new List<IGameActions1Actions>();
    private readonly InputAction m_GameActions1_Input;
    private readonly InputAction m_GameActions1_Jump;
    private readonly InputAction m_GameActions1_DebugIsgrounded;
    public struct GameActions1Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions1Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Input => m_Wrapper.m_GameActions1_Input;
        public InputAction @Jump => m_Wrapper.m_GameActions1_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions1_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions1Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions1Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions1ActionsCallbackInterfaces.Add(instance);
            @Input.started += instance.OnInput;
            @Input.performed += instance.OnInput;
            @Input.canceled += instance.OnInput;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions1Actions instance)
        {
            @Input.started -= instance.OnInput;
            @Input.performed -= instance.OnInput;
            @Input.canceled -= instance.OnInput;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions1Actions instance)
        {
            if (m_Wrapper.m_GameActions1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions1Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions1Actions @GameActions1 => new GameActions1Actions(this);

    // GameActions2
    private readonly InputActionMap m_GameActions2;
    private List<IGameActions2Actions> m_GameActions2ActionsCallbackInterfaces = new List<IGameActions2Actions>();
    private readonly InputAction m_GameActions2_MoveJumpVector;
    private readonly InputAction m_GameActions2_MovePlayerRight;
    private readonly InputAction m_GameActions2_MovePlayerLeft;
    private readonly InputAction m_GameActions2_Jump;
    private readonly InputAction m_GameActions2_DebugIsgrounded;
    public struct GameActions2Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions2Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveJumpVector => m_Wrapper.m_GameActions2_MoveJumpVector;
        public InputAction @MovePlayerRight => m_Wrapper.m_GameActions2_MovePlayerRight;
        public InputAction @MovePlayerLeft => m_Wrapper.m_GameActions2_MovePlayerLeft;
        public InputAction @Jump => m_Wrapper.m_GameActions2_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions2_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions2Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions2Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions2ActionsCallbackInterfaces.Add(instance);
            @MoveJumpVector.started += instance.OnMoveJumpVector;
            @MoveJumpVector.performed += instance.OnMoveJumpVector;
            @MoveJumpVector.canceled += instance.OnMoveJumpVector;
            @MovePlayerRight.started += instance.OnMovePlayerRight;
            @MovePlayerRight.performed += instance.OnMovePlayerRight;
            @MovePlayerRight.canceled += instance.OnMovePlayerRight;
            @MovePlayerLeft.started += instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed += instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled += instance.OnMovePlayerLeft;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions2Actions instance)
        {
            @MoveJumpVector.started -= instance.OnMoveJumpVector;
            @MoveJumpVector.performed -= instance.OnMoveJumpVector;
            @MoveJumpVector.canceled -= instance.OnMoveJumpVector;
            @MovePlayerRight.started -= instance.OnMovePlayerRight;
            @MovePlayerRight.performed -= instance.OnMovePlayerRight;
            @MovePlayerRight.canceled -= instance.OnMovePlayerRight;
            @MovePlayerLeft.started -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled -= instance.OnMovePlayerLeft;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions2Actions instance)
        {
            if (m_Wrapper.m_GameActions2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions2Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions2Actions @GameActions2 => new GameActions2Actions(this);

    // GameActions3
    private readonly InputActionMap m_GameActions3;
    private List<IGameActions3Actions> m_GameActions3ActionsCallbackInterfaces = new List<IGameActions3Actions>();
    private readonly InputAction m_GameActions3_MoveJumpVector;
    private readonly InputAction m_GameActions3_MovePlayerRight;
    private readonly InputAction m_GameActions3_MovePlayerLeft;
    private readonly InputAction m_GameActions3_Jump;
    private readonly InputAction m_GameActions3_DebugIsgrounded;
    public struct GameActions3Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions3Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveJumpVector => m_Wrapper.m_GameActions3_MoveJumpVector;
        public InputAction @MovePlayerRight => m_Wrapper.m_GameActions3_MovePlayerRight;
        public InputAction @MovePlayerLeft => m_Wrapper.m_GameActions3_MovePlayerLeft;
        public InputAction @Jump => m_Wrapper.m_GameActions3_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions3_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions3Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions3Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions3ActionsCallbackInterfaces.Add(instance);
            @MoveJumpVector.started += instance.OnMoveJumpVector;
            @MoveJumpVector.performed += instance.OnMoveJumpVector;
            @MoveJumpVector.canceled += instance.OnMoveJumpVector;
            @MovePlayerRight.started += instance.OnMovePlayerRight;
            @MovePlayerRight.performed += instance.OnMovePlayerRight;
            @MovePlayerRight.canceled += instance.OnMovePlayerRight;
            @MovePlayerLeft.started += instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed += instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled += instance.OnMovePlayerLeft;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions3Actions instance)
        {
            @MoveJumpVector.started -= instance.OnMoveJumpVector;
            @MoveJumpVector.performed -= instance.OnMoveJumpVector;
            @MoveJumpVector.canceled -= instance.OnMoveJumpVector;
            @MovePlayerRight.started -= instance.OnMovePlayerRight;
            @MovePlayerRight.performed -= instance.OnMovePlayerRight;
            @MovePlayerRight.canceled -= instance.OnMovePlayerRight;
            @MovePlayerLeft.started -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled -= instance.OnMovePlayerLeft;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions3Actions instance)
        {
            if (m_Wrapper.m_GameActions3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions3Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions3Actions @GameActions3 => new GameActions3Actions(this);

    // GameActions4
    private readonly InputActionMap m_GameActions4;
    private List<IGameActions4Actions> m_GameActions4ActionsCallbackInterfaces = new List<IGameActions4Actions>();
    private readonly InputAction m_GameActions4_MovePlayerLeft;
    private readonly InputAction m_GameActions4_MovePlayerRight;
    private readonly InputAction m_GameActions4_MoveJumpVectorPositive;
    private readonly InputAction m_GameActions4_MoveJumpVectorNegative;
    private readonly InputAction m_GameActions4_Jump;
    private readonly InputAction m_GameActions4_DebugIsgrounded;
    public struct GameActions4Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions4Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayerLeft => m_Wrapper.m_GameActions4_MovePlayerLeft;
        public InputAction @MovePlayerRight => m_Wrapper.m_GameActions4_MovePlayerRight;
        public InputAction @MoveJumpVectorPositive => m_Wrapper.m_GameActions4_MoveJumpVectorPositive;
        public InputAction @MoveJumpVectorNegative => m_Wrapper.m_GameActions4_MoveJumpVectorNegative;
        public InputAction @Jump => m_Wrapper.m_GameActions4_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions4_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions4Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions4Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions4ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions4ActionsCallbackInterfaces.Add(instance);
            @MovePlayerLeft.started += instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed += instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled += instance.OnMovePlayerLeft;
            @MovePlayerRight.started += instance.OnMovePlayerRight;
            @MovePlayerRight.performed += instance.OnMovePlayerRight;
            @MovePlayerRight.canceled += instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorNegative.started += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled += instance.OnMoveJumpVectorNegative;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions4Actions instance)
        {
            @MovePlayerLeft.started -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled -= instance.OnMovePlayerLeft;
            @MovePlayerRight.started -= instance.OnMovePlayerRight;
            @MovePlayerRight.performed -= instance.OnMovePlayerRight;
            @MovePlayerRight.canceled -= instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorNegative.started -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled -= instance.OnMoveJumpVectorNegative;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions4Actions instance)
        {
            if (m_Wrapper.m_GameActions4ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions4Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions4ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions4ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions4Actions @GameActions4 => new GameActions4Actions(this);

    // GameActions5
    private readonly InputActionMap m_GameActions5;
    private List<IGameActions5Actions> m_GameActions5ActionsCallbackInterfaces = new List<IGameActions5Actions>();
    private readonly InputAction m_GameActions5_MovePlayerLeft;
    private readonly InputAction m_GameActions5_MovePlayerRight;
    private readonly InputAction m_GameActions5_MoveJumpVectorPositive;
    private readonly InputAction m_GameActions5_MoveJumpVectorNegative;
    private readonly InputAction m_GameActions5_Jump;
    private readonly InputAction m_GameActions5_DebugIsgrounded;
    public struct GameActions5Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions5Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayerLeft => m_Wrapper.m_GameActions5_MovePlayerLeft;
        public InputAction @MovePlayerRight => m_Wrapper.m_GameActions5_MovePlayerRight;
        public InputAction @MoveJumpVectorPositive => m_Wrapper.m_GameActions5_MoveJumpVectorPositive;
        public InputAction @MoveJumpVectorNegative => m_Wrapper.m_GameActions5_MoveJumpVectorNegative;
        public InputAction @Jump => m_Wrapper.m_GameActions5_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions5_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions5; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions5Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions5Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions5ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions5ActionsCallbackInterfaces.Add(instance);
            @MovePlayerLeft.started += instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed += instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled += instance.OnMovePlayerLeft;
            @MovePlayerRight.started += instance.OnMovePlayerRight;
            @MovePlayerRight.performed += instance.OnMovePlayerRight;
            @MovePlayerRight.canceled += instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorNegative.started += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled += instance.OnMoveJumpVectorNegative;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions5Actions instance)
        {
            @MovePlayerLeft.started -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.performed -= instance.OnMovePlayerLeft;
            @MovePlayerLeft.canceled -= instance.OnMovePlayerLeft;
            @MovePlayerRight.started -= instance.OnMovePlayerRight;
            @MovePlayerRight.performed -= instance.OnMovePlayerRight;
            @MovePlayerRight.canceled -= instance.OnMovePlayerRight;
            @MoveJumpVectorPositive.started -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorNegative.started -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled -= instance.OnMoveJumpVectorNegative;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions5Actions instance)
        {
            if (m_Wrapper.m_GameActions5ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions5Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions5ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions5ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions5Actions @GameActions5 => new GameActions5Actions(this);

    // GameActions6
    private readonly InputActionMap m_GameActions6;
    private List<IGameActions6Actions> m_GameActions6ActionsCallbackInterfaces = new List<IGameActions6Actions>();
    private readonly InputAction m_GameActions6_Input;
    private readonly InputAction m_GameActions6_Jump;
    private readonly InputAction m_GameActions6_MoveState;
    private readonly InputAction m_GameActions6_DebugIsgrounded;
    public struct GameActions6Actions
    {
        private @ControllerInput m_Wrapper;
        public GameActions6Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Input => m_Wrapper.m_GameActions6_Input;
        public InputAction @Jump => m_Wrapper.m_GameActions6_Jump;
        public InputAction @MoveState => m_Wrapper.m_GameActions6_MoveState;
        public InputAction @DebugIsgrounded => m_Wrapper.m_GameActions6_DebugIsgrounded;
        public InputActionMap Get() { return m_Wrapper.m_GameActions6; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions6Actions set) { return set.Get(); }
        public void AddCallbacks(IGameActions6Actions instance)
        {
            if (instance == null || m_Wrapper.m_GameActions6ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActions6ActionsCallbackInterfaces.Add(instance);
            @Input.started += instance.OnInput;
            @Input.performed += instance.OnInput;
            @Input.canceled += instance.OnInput;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MoveState.started += instance.OnMoveState;
            @MoveState.performed += instance.OnMoveState;
            @MoveState.canceled += instance.OnMoveState;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
        }

        private void UnregisterCallbacks(IGameActions6Actions instance)
        {
            @Input.started -= instance.OnInput;
            @Input.performed -= instance.OnInput;
            @Input.canceled -= instance.OnInput;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MoveState.started -= instance.OnMoveState;
            @MoveState.performed -= instance.OnMoveState;
            @MoveState.canceled -= instance.OnMoveState;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
        }

        public void RemoveCallbacks(IGameActions6Actions instance)
        {
            if (m_Wrapper.m_GameActions6ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions6Actions instance)
        {
            foreach (var item in m_Wrapper.m_GameActions6ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActions6ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions6Actions @GameActions6 => new GameActions6Actions(this);

    // Rework1
    private readonly InputActionMap m_Rework1;
    private List<IRework1Actions> m_Rework1ActionsCallbackInterfaces = new List<IRework1Actions>();
    private readonly InputAction m_Rework1_Left;
    private readonly InputAction m_Rework1_Right;
    private readonly InputAction m_Rework1_Jump;
    private readonly InputAction m_Rework1_DebugIsgrounded;
    private readonly InputAction m_Rework1_MoveJumpVectorNegative;
    private readonly InputAction m_Rework1_MoveJumpVectorPositive;
    public struct Rework1Actions
    {
        private @ControllerInput m_Wrapper;
        public Rework1Actions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Rework1_Left;
        public InputAction @Right => m_Wrapper.m_Rework1_Right;
        public InputAction @Jump => m_Wrapper.m_Rework1_Jump;
        public InputAction @DebugIsgrounded => m_Wrapper.m_Rework1_DebugIsgrounded;
        public InputAction @MoveJumpVectorNegative => m_Wrapper.m_Rework1_MoveJumpVectorNegative;
        public InputAction @MoveJumpVectorPositive => m_Wrapper.m_Rework1_MoveJumpVectorPositive;
        public InputActionMap Get() { return m_Wrapper.m_Rework1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Rework1Actions set) { return set.Get(); }
        public void AddCallbacks(IRework1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Rework1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Rework1ActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @DebugIsgrounded.started += instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed += instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled += instance.OnDebugIsgrounded;
            @MoveJumpVectorNegative.started += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorPositive.started += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled += instance.OnMoveJumpVectorPositive;
        }

        private void UnregisterCallbacks(IRework1Actions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @DebugIsgrounded.started -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.performed -= instance.OnDebugIsgrounded;
            @DebugIsgrounded.canceled -= instance.OnDebugIsgrounded;
            @MoveJumpVectorNegative.started -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorPositive.started -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled -= instance.OnMoveJumpVectorPositive;
        }

        public void RemoveCallbacks(IRework1Actions instance)
        {
            if (m_Wrapper.m_Rework1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRework1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Rework1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Rework1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Rework1Actions @Rework1 => new Rework1Actions(this);
    public interface IGameActionsActions
    {
        void OnMoveJumpVectorNegative(InputAction.CallbackContext context);
        void OnMovePlayerLeft(InputAction.CallbackContext context);
        void OnMovePlayerRight(InputAction.CallbackContext context);
        void OnMoveJumpVectorPositive(InputAction.CallbackContext context);
        void OnInput(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions1Actions
    {
        void OnInput(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions2Actions
    {
        void OnMoveJumpVector(InputAction.CallbackContext context);
        void OnMovePlayerRight(InputAction.CallbackContext context);
        void OnMovePlayerLeft(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions3Actions
    {
        void OnMoveJumpVector(InputAction.CallbackContext context);
        void OnMovePlayerRight(InputAction.CallbackContext context);
        void OnMovePlayerLeft(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions4Actions
    {
        void OnMovePlayerLeft(InputAction.CallbackContext context);
        void OnMovePlayerRight(InputAction.CallbackContext context);
        void OnMoveJumpVectorPositive(InputAction.CallbackContext context);
        void OnMoveJumpVectorNegative(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions5Actions
    {
        void OnMovePlayerLeft(InputAction.CallbackContext context);
        void OnMovePlayerRight(InputAction.CallbackContext context);
        void OnMoveJumpVectorPositive(InputAction.CallbackContext context);
        void OnMoveJumpVectorNegative(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IGameActions6Actions
    {
        void OnInput(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMoveState(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
    }
    public interface IRework1Actions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDebugIsgrounded(InputAction.CallbackContext context);
        void OnMoveJumpVectorNegative(InputAction.CallbackContext context);
        void OnMoveJumpVectorPositive(InputAction.CallbackContext context);
    }
}
