//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/ControllerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInput"",
    ""maps"": [
        {
            ""name"": ""GameActions"",
            ""id"": ""a3659a87-8dc0-473c-a1d6-6d34cb3f3bee"",
            ""actions"": [
                {
                    ""name"": ""MoveJumpVectorNegative"",
                    ""type"": ""Value"",
                    ""id"": ""8911b922-f9a7-4a61-9ff1-caa71ca6c405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveJumpVectorPositive"",
                    ""type"": ""Value"",
                    ""id"": ""3d3b2a0b-cada-44e0-b651-16294c520fec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""52e20a42-39dc-4ede-9e88-71ae82fe5574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4f7c093-7e34-4294-b3d5-aa4eb012c4d4"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a47c36-ae37-4e18-8925-bf6eb017b4fe"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5826f3fa-44ca-4cd0-a965-0375e282df68"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07a140bf-c83d-4125-93f8-39f7c670bde9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJumpVectorPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f3ac4f4-3331-4946-8c8a-958ce3d76f3d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0803d79d-4c87-40eb-a120-cba9f2be45db"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameActions
        m_GameActions = asset.FindActionMap("GameActions", throwIfNotFound: true);
        m_GameActions_MoveJumpVectorNegative = m_GameActions.FindAction("MoveJumpVectorNegative", throwIfNotFound: true);
        m_GameActions_MoveJumpVectorPositive = m_GameActions.FindAction("MoveJumpVectorPositive", throwIfNotFound: true);
        m_GameActions_Jump = m_GameActions.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameActions
    private readonly InputActionMap m_GameActions;
    private List<IGameActionsActions> m_GameActionsActionsCallbackInterfaces = new List<IGameActionsActions>();
    private readonly InputAction m_GameActions_MoveJumpVectorNegative;
    private readonly InputAction m_GameActions_MoveJumpVectorPositive;
    private readonly InputAction m_GameActions_Jump;
    public struct GameActionsActions
    {
        private @ControllerInput m_Wrapper;
        public GameActionsActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveJumpVectorNegative => m_Wrapper.m_GameActions_MoveJumpVectorNegative;
        public InputAction @MoveJumpVectorPositive => m_Wrapper.m_GameActions_MoveJumpVectorPositive;
        public InputAction @Jump => m_Wrapper.m_GameActions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_GameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionsActions set) { return set.Get(); }
        public void AddCallbacks(IGameActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsActionsCallbackInterfaces.Add(instance);
            @MoveJumpVectorNegative.started += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled += instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorPositive.started += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed += instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled += instance.OnMoveJumpVectorPositive;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IGameActionsActions instance)
        {
            @MoveJumpVectorNegative.started -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.performed -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorNegative.canceled -= instance.OnMoveJumpVectorNegative;
            @MoveJumpVectorPositive.started -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.performed -= instance.OnMoveJumpVectorPositive;
            @MoveJumpVectorPositive.canceled -= instance.OnMoveJumpVectorPositive;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IGameActionsActions instance)
        {
            if (m_Wrapper.m_GameActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActionsActions @GameActions => new GameActionsActions(this);
    public interface IGameActionsActions
    {
        void OnMoveJumpVectorNegative(InputAction.CallbackContext context);
        void OnMoveJumpVectorPositive(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
